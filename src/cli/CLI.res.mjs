// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as AuthCommand from "./AuthCommand.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as SubmitCommand from "./SubmitCommand.res.mjs";
import * as JjUtilsJs from "../lib/jjUtils.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function getLogOutput(prim) {
  return JjUtilsJs.getLogOutput();
}

function buildChangeGraph(prim) {
  return JjUtilsJs.buildChangeGraph();
}

var help = "🔧 jj-stack - Jujutsu Git workflow automation\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nUSAGE:\n  jj-stack [COMMAND] [OPTIONS]\n\nCOMMANDS:\n  analyze               Analyze the current change graph\n\n  submit <bookmark>     Submit a bookmark (and its stack) as PRs\n    --dry-run           Show what would be done without making changes\n\n  auth test             Test GitHub authentication\n  auth logout           Clear saved authentication\n  auth help             Show authentication help\n\n  help, --help, -h      Show this help message\n\nDEFAULT BEHAVIOR:\n  Running jj-stack without arguments shows the current change graph\n\nEXAMPLES:\n  jj-stack                        # Show change graph\n  jj-stack submit feature-branch  # Submit feature-branch as PR\n  jj-stack submit feature-branch --dry-run  # Preview what would be done\n  jj-stack auth test              # Test GitHub authentication\n\nFor more information, visit: https://github.com/your-org/jj-stack\n";

async function main() {
  try {
    var args = process.argv.slice(2, process.argv.length);
    var command = args[0];
    if (command !== undefined) {
      switch (command) {
        case "analyze" :
            console.log("Building change graph from user bookmarks...");
            var changeGraph = await JjUtilsJs.buildChangeGraph();
            console.log("\n=== CHANGE GRAPH RESULTS ===");
            console.log("Total bookmarks: " + String(changeGraph.bookmarks.length));
            console.log("Total stacks: " + String(changeGraph.stacks.length));
            if (changeGraph.stacks.length > 0) {
              console.log("\n=== BOOKMARK STACKS ===");
              changeGraph.stacks.forEach(function (stack, i) {
                    console.log("\nStack " + String(i + 1 | 0) + ":");
                    console.log("  Base commit: " + stack.baseCommit);
                    console.log("  Bookmarks: " + stack.segments.map(function (s) {
                                return s.bookmark.name;
                              }).join(", "));
                    var totalChanges = Core__Array.reduce(stack.segments, 0, (function (sum, segment) {
                            return sum + segment.changes.length | 0;
                          }));
                    console.log("  Total changes: " + String(totalChanges));
                    if (stack.segments.length > 1) {
                      console.log("  📚 This is a stacked set of bookmarks!");
                      return ;
                    }
                    
                  });
            }
            console.log("\n=== INDIVIDUAL BOOKMARK DETAILS ===");
            changeGraph.segmentChanges.forEach(function (segmentChanges, bookmarkName) {
                  console.log("\n" + bookmarkName + ":");
                  console.log("  Segment changes: " + String(segmentChanges.length));
                  var match = segmentChanges.at(0);
                  var match$1 = Core__Array.last(segmentChanges);
                  if (match !== undefined && match$1 !== undefined) {
                    console.log("  Latest: " + match.descriptionFirstLine);
                    console.log("  Oldest: " + match$1.descriptionFirstLine);
                    return ;
                  }
                  
                });
            return ;
        case "auth" :
            var match = args[1];
            if (match === undefined) {
              return AuthCommand.authHelpCommand();
            }
            switch (match) {
              case "logout" :
                  return await AuthCommand.authLogoutCommand();
              case "test" :
                  return await AuthCommand.authTestCommand();
              default:
                return AuthCommand.authHelpCommand();
            }
        case "--help" :
        case "-h" :
        case "help" :
            console.log(help);
            return ;
        case "submit" :
            var bookmarkName = args[1];
            if (bookmarkName !== undefined) {
              var isDryRun = args.includes("--dry-run");
              return await SubmitCommand.submitCommand(bookmarkName, {
                          dryRun: isDryRun
                        });
            }
            console.error("Usage: jj-stack submit <bookmark-name> [--dry-run]");
            process.exit(1);
            return ;
        default:
          console.error("Unknown command: " + command + ". Use 'jj-stack help' for usage information.");
          process.exit(1);
          return ;
      }
    } else {
      console.log(help);
      return ;
    }
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    if (error.RE_EXN_ID === Js_exn.$$Error) {
      var message = error._1.message;
      if (message !== undefined) {
        console.error("An error occurred: " + message);
        process.exit(1);
      } else {
        console.error("An unknown error occurred.");
        process.exit(1);
      }
      return ;
    }
    console.error("An unknown error occurred.");
    process.exit(1);
    return ;
  }
}

export {
  getLogOutput ,
  buildChangeGraph ,
  help ,
  main ,
}
/* AuthCommand Not a pure module */
