// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "./Utils.res.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as AuthCommand from "./AuthCommand.res.mjs";
import * as SubmitCommand from "./SubmitCommand.res.mjs";
import * as AnalyzeCommand from "./AnalyzeCommand.res.mjs";
import * as JjUtilsJs from "../lib/jjUtils.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function createJjFunctions(prim) {
  return JjUtilsJs.createJjFunctions(prim);
}

var help = "🔧 jj-stack - Jujutsu Git workflow automation\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nUSAGE:\n  jj-stack [COMMAND] [OPTIONS]\n\nCOMMANDS:\n  submit <bookmark>     Submit a bookmark (and its stack) as PRs\n    --dry-run           Show what would be done without making changes\n\n  auth test             Test GitHub authentication\n  auth logout           Clear saved authentication\n  auth help             Show authentication help\n\n  help, --help, -h      Show this help message\n\nDEFAULT BEHAVIOR:\n  Running jj-stack without arguments analyzes and displays the current\n  graph of stacked bookmarks.\n\nEXAMPLES:\n  jj-stack                        # Show change graph\n  jj-stack submit feature-branch  # Submit feature-branch as PR\n  jj-stack submit feature-branch --dry-run  # Preview what would be done\n  jj-stack auth test              # Test GitHub authentication\n\nFor more information, visit: https://github.com/keanemind/jj-stack\n";

async function main() {
  try {
    var jjPathResult = await Utils.getJJPath();
    var jjConfig = {
      binaryPath: jjPathResult.filepath
    };
    var jjFunctions = JjUtilsJs.createJjFunctions(jjConfig);
    var args = process.argv.slice(2, process.argv.length);
    var command = args[0];
    if (command === undefined) {
      return await AnalyzeCommand.analyzeCommand(jjFunctions);
    }
    switch (command) {
      case "auth" :
          var match = args[1];
          if (match === "test") {
            return await AuthCommand.authTestCommand();
          } else {
            return AuthCommand.authHelpCommand();
          }
      case "--help" :
      case "-h" :
      case "help" :
          console.log(help);
          return ;
      case "submit" :
          var bookmarkName = args[1];
          if (bookmarkName !== undefined) {
            var isDryRun = args.includes("--dry-run");
            return await SubmitCommand.submitCommand(jjFunctions, bookmarkName, {
                        dryRun: isDryRun
                      });
          }
          console.error("Usage: jj-stack submit <bookmark-name> [--dry-run]");
          process.exit(1);
          return ;
      default:
        console.error("Unknown command: " + command + ". Use 'jj-stack help' for usage information.");
        process.exit(1);
        return ;
    }
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    if (error.RE_EXN_ID === Js_exn.$$Error) {
      var message = error._1.message;
      if (message !== undefined) {
        console.error("An error occurred: " + message);
        process.exit(1);
      } else {
        console.error("An unknown error occurred.");
        process.exit(1);
      }
      return ;
    }
    console.error("An unknown error occurred.");
    process.exit(1);
    return ;
  }
}

export {
  createJjFunctions ,
  help ,
  main ,
}
/* Utils Not a pure module */
