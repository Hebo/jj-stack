// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Ink from "ink";
import * as Utils from "./Utils.res.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Counter from "./Counter.res.mjs";
import * as AuthCommand from "./AuthCommand.res.mjs";
import * as SubmitCommand from "./SubmitCommand.res.mjs";
import * as AnalyzeCommand from "./AnalyzeCommand.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var help = "üîß jj-stack - Jujutsu Git workflow automation\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nUSAGE:\n  jj-stack [COMMAND] [OPTIONS]\n\nCOMMANDS:\n  analyze               Analyze the current change graph\n\n  submit <bookmark>     Submit a bookmark (and its stack) as PRs\n    --dry-run           Show what would be done without making changes\n\n  auth test             Test GitHub authentication\n  auth logout           Clear saved authentication\n  auth help             Show authentication help\n\n  help, --help, -h      Show this help message\n\nDEFAULT BEHAVIOR:\n  Running jj-stack without arguments shows the current change graph\n\nEXAMPLES:\n  jj-stack                        # Show change graph\n  jj-stack submit feature-branch  # Submit feature-branch as PR\n  jj-stack submit feature-branch --dry-run  # Preview what would be done\n  jj-stack auth test              # Test GitHub authentication\n\nFor more information, visit: https://github.com/your-org/jj-stack\n";

async function main() {
  try {
    var args = process.argv.slice(2, process.argv.length);
    var command = args[0];
    if (command !== undefined) {
      switch (command) {
        case "analyze" :
            await AnalyzeCommand.analyzeCommand();
            break;
        case "auth" :
            var match = args[1];
            if (match !== undefined) {
              switch (match) {
                case "logout" :
                    await AuthCommand.authLogoutCommand();
                    break;
                case "test" :
                    await AuthCommand.authTestCommand();
                    break;
                default:
                  AuthCommand.authHelpCommand();
              }
            } else {
              AuthCommand.authHelpCommand();
            }
            break;
        case "--help" :
        case "-h" :
        case "help" :
            console.log(help);
            break;
        case "submit" :
            var bookmarkName = args[1];
            if (bookmarkName !== undefined) {
              var isDryRun = args.includes("--dry-run");
              await SubmitCommand.submitCommand(bookmarkName, {
                    dryRun: isDryRun
                  });
            } else {
              console.error("Usage: jj-stack submit <bookmark-name> [--dry-run]");
              process.exit(1);
            }
            break;
        default:
          console.error("Unknown command: " + command + ". Use 'jj-stack help' for usage information.");
          process.exit(1);
      }
    } else {
      console.log(help);
    }
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    if (error.RE_EXN_ID === Js_exn.$$Error) {
      var message = error._1.message;
      if (message !== undefined) {
        console.error("An error occurred: " + message);
        process.exit(1);
      } else {
        console.error("An unknown error occurred.");
        process.exit(1);
      }
    } else {
      console.error("An unknown error occurred.");
      process.exit(1);
    }
  }
  $$Ink.render(JsxRuntime.jsx(Counter.make, {}));
  await Utils.sleep(1000);
  process.exit(0);
}

export {
  help ,
  main ,
}
/* ink Not a pure module */
