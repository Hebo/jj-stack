// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Ink from "ink";
import * as Utils from "./Utils.res.mjs";
import * as React from "react";
import * as Process from "process";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

var $$Text = {};

function AnalyzeCommandComponent(props) {
  var topSort = props.topSort;
  var output = props.output;
  var prStatusMap = props.prStatusMap;
  var changeGraph = props.changeGraph;
  var isDataActionable = Array.from(changeGraph.bookmarks.values()).some(function (bookmark) {
        if (!bookmark.hasRemote || !bookmark.isSynced) {
          return true;
        } else {
          return prStatusMap.get(bookmark.name) === undefined;
        }
      });
  React.useEffect((function () {
          if (!isDataActionable) {
            Process.exit(0);
          }
          
        }), []);
  var match = React.useState(function () {
        return Core__Option.mapOr(output[0], undefined, (function (outputRow) {
                      return outputRow.changeId;
                    }));
      });
  var setSelectedChangeId = match[1];
  var selectedChangeId = match[0];
  $$Ink.useInput((function (param, key) {
          if (selectedChangeId !== undefined) {
            if (key.upArrow) {
              var selectedChangeIdRowIdx = Core__Option.getExn(Core__Array.findIndexOpt(topSort, (function (changeId) {
                          return changeId === selectedChangeId;
                        })), undefined);
              if (selectedChangeIdRowIdx > 0) {
                setSelectedChangeId(function (param) {
                      return Core__Option.getExn(topSort[selectedChangeIdRowIdx - 1 | 0], undefined);
                    });
              }
              
            } else if (key.downArrow) {
              var selectedChangeIdRowIdx$1 = Core__Option.getExn(Core__Array.findIndexOpt(topSort, (function (changeId) {
                          return changeId === selectedChangeId;
                        })), undefined);
              if (selectedChangeIdRowIdx$1 < (topSort.length - 1 | 0)) {
                setSelectedChangeId(function (param) {
                      return Core__Option.getExn(topSort[selectedChangeIdRowIdx$1 + 1 | 0], undefined);
                    });
              }
              
            }
            
          }
          
        }), undefined);
  var selectedChangeIdAncestors = new Set();
  if (selectedChangeId !== undefined) {
    selectedChangeIdAncestors.add(selectedChangeId);
    var cur = selectedChangeId;
    while(changeGraph.bookmarkedChangeAdjacencyList.has(cur)) {
      var parentChangeId = Core__Option.getExn(changeGraph.bookmarkedChangeAdjacencyList.get(cur), undefined);
      selectedChangeIdAncestors.add(parentChangeId);
      cur = parentChangeId;
    };
  }
  return JsxRuntime.jsxs(React.Fragment, {
              children: [
                output.map(function (line) {
                      var changeId = line.changeId;
                      var tmp;
                      if (changeId !== undefined) {
                        var bookmarksStr = " (" + Utils.changeIdToLogEntry(changeGraph, changeId).localBookmarks.join(", ") + ")";
                        tmp = JsxRuntime.jsx($$Ink.Text, {
                              children: " " + changeId + bookmarksStr,
                              color: selectedChangeIdAncestors.has(changeId) ? "red" : undefined
                            });
                      } else {
                        tmp = null;
                      }
                      return JsxRuntime.jsxs($$Ink.Text, {
                                  children: [
                                    JsxRuntime.jsx($$Ink.Text, {
                                          children: line.chars.join("")
                                        }),
                                    tmp
                                  ]
                                });
                    }),
                JsxRuntime.jsx($$Ink.Text, {
                      children: "\n â—‹ trunk()\n"
                    })
              ]
            });
}

var make = AnalyzeCommandComponent;

export {
  $$Text ,
  make ,
}
/* ink Not a pure module */
