// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Ink from "ink";
import * as Utils from "./Utils.res.mjs";
import * as React from "react";
import * as Process from "process";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

var $$Text = {};

function AnalyzeCommandComponent(props) {
  var output = props.output;
  var prStatusMap = props.prStatusMap;
  var changeGraph = props.changeGraph;
  var isDataActionable = Array.from(changeGraph.bookmarks.values()).some(function (bookmark) {
        if (!bookmark.hasRemote || !bookmark.isSynced) {
          return true;
        } else {
          return prStatusMap.get(bookmark.name) === undefined;
        }
      });
  React.useEffect((function () {
          if (!isDataActionable) {
            Process.exit(0);
          }
          
        }), []);
  var match = React.useState(function () {
        return Core__Option.mapOr(output[0], undefined, (function (outputRow) {
                      return outputRow.changeId;
                    }));
      });
  var selectedChangeId = match[0];
  var selectedChangeIdAncestors = new Set();
  if (selectedChangeId !== undefined) {
    selectedChangeIdAncestors.add(selectedChangeId);
    var cur = selectedChangeId;
    while(changeGraph.bookmarkedChangeAdjacencyList.has(cur)) {
      var parentChangeId = Core__Option.getExn(changeGraph.bookmarkedChangeAdjacencyList.get(cur), undefined);
      selectedChangeIdAncestors.add(parentChangeId);
      cur = parentChangeId;
    };
  }
  var str = output.map(function (line) {
          var bookmarksStr = line.changeId !== "" ? " (" + Utils.changeIdToLogEntry(changeGraph, line.changeId).localBookmarks.join(", ") + ")" : "";
          return line.chars.join("") + " " + line.changeId + bookmarksStr;
        }).join("\n") + "\n â—‹ trunk()\n";
  return JsxRuntime.jsx($$Ink.Text, {
              children: str
            });
}

var make = AnalyzeCommandComponent;

export {
  $$Text ,
  make ,
}
/* ink Not a pure module */
