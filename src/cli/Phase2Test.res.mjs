// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "./Utils.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function testHelpers() {
  console.log("ðŸ§ª Testing Phase 2 helper functions...");
  var singleBookmarkSegment_bookmarks = [{
      name: "test-single",
      commitId: "abc123",
      changeId: "abc123",
      hasRemote: true,
      isSynced: true
    }];
  var singleBookmarkSegment_changes = [];
  var singleBookmarkSegment = {
    bookmarks: singleBookmarkSegment_bookmarks,
    changes: singleBookmarkSegment_changes
  };
  var multiBookmarkSegment_bookmarks = [
    {
      name: "test-multi-1",
      commitId: "def456",
      changeId: "def456",
      hasRemote: true,
      isSynced: true
    },
    {
      name: "test-multi-2",
      commitId: "def456",
      changeId: "def456",
      hasRemote: false,
      isSynced: false
    }
  ];
  var multiBookmarkSegment_changes = [];
  var multiBookmarkSegment = {
    bookmarks: multiBookmarkSegment_bookmarks,
    changes: multiBookmarkSegment_changes
  };
  var singleOnlySegments = [singleBookmarkSegment];
  var needsUI1 = Utils.isInteractiveUINeeded(singleOnlySegments);
  console.log("âœ… Single bookmark only: needsUI = " + (
        needsUI1 ? "true" : "false"
      ) + " (expected: false)");
  var mixedSegments = [
    singleBookmarkSegment,
    multiBookmarkSegment
  ];
  var needsUI2 = Utils.isInteractiveUINeeded(mixedSegments);
  console.log("âœ… Mixed segments: needsUI = " + (
        needsUI2 ? "true" : "false"
      ) + " (expected: true)");
  var directSelections = Utils.getDirectBookmarkSelections(singleOnlySegments);
  console.log("âœ… Direct selections: got " + directSelections.length.toString() + " bookmark(s)");
  console.log("   First bookmark: " + Core__Option.getExn(directSelections[0], undefined).name);
  console.log("ðŸŽ‰ Phase 2 helper tests completed!");
}

testHelpers();

export {
  testHelpers ,
}
/*  Not a pure module */
