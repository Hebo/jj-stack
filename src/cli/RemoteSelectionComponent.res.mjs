// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Ink from "ink";
import * as React from "react";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function extractRepoInfo(url) {
  var httpsPattern = /https:\/\/(?:[^\/]+\.)?github\.com\/([^\/]+)\/([^\/]+?)(?:\.git)?$/;
  var sshPattern = /git@(?:[^:]+\.)?github\.com:([^\/]+)\/([^\/]+?)(?:\.git)?$/;
  var tryMatch = function (pattern, url) {
    var matches = Js_string.match_(pattern, url);
    if (matches === undefined) {
      return ;
    }
    var match = matches[1];
    var match$1 = matches[2];
    if (match === undefined) {
      return ;
    }
    var owner = Caml_option.valFromOption(match);
    if (owner === undefined) {
      return ;
    }
    if (match$1 === undefined) {
      return ;
    }
    var repo = Caml_option.valFromOption(match$1);
    if (repo !== undefined) {
      return [
              owner,
              repo
            ];
    }
    
  };
  var result = tryMatch(httpsPattern, url);
  if (result !== undefined) {
    return result;
  } else {
    return tryMatch(sshPattern, url);
  }
}

function RemoteSelectionComponent(props) {
  var onComplete = props.onComplete;
  var remotes = props.remotes;
  var match = React.useState(function () {
        return {
                focusedRemoteIndex: 0
              };
      });
  var setSelectionState = match[1];
  var selectionState = match[0];
  $$Ink.useInput((function (param, key) {
          if (key.return) {
            var selectedRemote = Core__Option.getExn(remotes[selectionState.focusedRemoteIndex], undefined);
            onComplete(selectedRemote.name);
          } else if (key.upArrow) {
            setSelectionState(function (state) {
                  if (state.focusedRemoteIndex > 0) {
                    return {
                            focusedRemoteIndex: state.focusedRemoteIndex - 1 | 0
                          };
                  } else {
                    return state;
                  }
                });
          } else if (key.downArrow) {
            setSelectionState(function (state) {
                  if (state.focusedRemoteIndex < (remotes.length - 1 | 0)) {
                    return {
                            focusedRemoteIndex: state.focusedRemoteIndex + 1 | 0
                          };
                  } else {
                    return state;
                  }
                });
          }
          
        }), undefined);
  return JsxRuntime.jsxs(React.Fragment, {
              children: [
                JsxRuntime.jsx($$Ink.Text, {
                      children: "Multiple GitHub remotes found. Please select one:\n\n"
                    }),
                remotes.map(function (remote, remoteIndex) {
                      var isFocused = remoteIndex === selectionState.focusedRemoteIndex;
                      var focusIndicator = isFocused ? JsxRuntime.jsx($$Ink.Text, {
                              children: "▶ ",
                              color: "red"
                            }) : JsxRuntime.jsx($$Ink.Text, {
                              children: "  "
                            });
                      var match = extractRepoInfo(remote.url);
                      var repoInfoDisplay = match !== undefined ? JsxRuntime.jsx($$Ink.Text, {
                              children: " (" + match[0] + "/" + match[1] + ")",
                              color: "cyan"
                            }) : JsxRuntime.jsx($$Ink.Text, {
                              children: ""
                            });
                      var remoteName = isFocused ? JsxRuntime.jsx($$Ink.Text, {
                              children: remote.name,
                              color: "red",
                              bold: true
                            }) : JsxRuntime.jsx($$Ink.Text, {
                              children: remote.name,
                              bold: true
                            });
                      var remoteUrl = isFocused ? JsxRuntime.jsx($$Ink.Text, {
                              children: remote.url,
                              color: "yellow"
                            }) : JsxRuntime.jsx($$Ink.Text, {
                              children: remote.url,
                              color: "gray"
                            });
                      return JsxRuntime.jsxs($$Ink.Text, {
                                  children: [
                                    focusIndicator,
                                    remoteName,
                                    repoInfoDisplay,
                                    "\n",
                                    JsxRuntime.jsx($$Ink.Text, {
                                          children: "    "
                                        }),
                                    remoteUrl,
                                    "\n"
                                  ]
                                }, remoteIndex.toString());
                    }),
                JsxRuntime.jsx($$Ink.Text, {
                      children: "\nUse ↑↓ to navigate, Enter to select\n"
                    })
              ]
            });
}

var $$Text;

var make = RemoteSelectionComponent;

export {
  $$Text ,
  extractRepoInfo ,
  make ,
}
/* ink Not a pure module */
