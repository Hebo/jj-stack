// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as AuthJs from "../lib/auth.js";

function getGitHubAuthRaw(prim) {
  return AuthJs.getGitHubAuth();
}

async function getGitHubAuth() {
  var result = await AuthJs.getGitHubAuth();
  var match = result.kind;
  switch (match) {
    case "failure" :
        return {
                TAG: "Failure",
                reason: result.reason
              };
    case "success" :
        var match$1 = result.config.source;
        var tmp;
        switch (match$1) {
          case "env-var" :
              tmp = "env-var";
              break;
          case "gh-cli" :
              tmp = "gh-cli";
              break;
          default:
            tmp = Js_exn.raiseError("Unexpected config source");
        }
        return {
                TAG: "Success",
                config: {
                  token: result.config.token,
                  source: tmp
                }
              };
    default:
      return {
              TAG: "Failure",
              reason: "unknown"
            };
  }
}

function getAuthDetails(prim) {
  return AuthJs.getAuthDetails(prim);
}

var authInstructions = "🔐 GitHub Authentication Required\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\nTo create and manage pull requests, jj-stack needs access to GitHub.\n\nPlease set up authentication using one of these methods:\n1. Install GitHub CLI and run: gh auth login\n2. Set environment variable: export GITHUB_TOKEN=your_token\n   (Create a token at: https://github.com/settings/tokens/new)\n\nRequired token permissions:\n• repo (Full control of private repositories)\n• pull_requests (Create and update pull requests)";

async function getGitHubAuthCli() {
  var result = await getGitHubAuth();
  if (result.TAG === "Success") {
    var config = result.config;
    var match = config.source;
    var sourceMessage = match === "gh-cli" ? "✅ Using GitHub CLI authentication" : "✅ Using GitHub token from environment variable";
    console.log(sourceMessage);
    return config;
  }
  if (result.reason === "invalid-token") {
    console.warn("⚠️  GitHub token from environment variable is invalid");
  }
  console.error("\n" + authInstructions);
  return Js_exn.raiseError("GitHub authentication required. Please set up authentication and try again.");
}

function sourceToString(source) {
  if (source === "gh-cli") {
    return "GitHub CLI";
  } else {
    return "Environment Variable";
  }
}

async function authTestCommand() {
  console.log("🔐 Testing GitHub Authentication...\n");
  var authConfig = await getGitHubAuthCli();
  var authDetails = await AuthJs.getAuthDetails(authConfig);
  var name = authDetails.name;
  var nameStr = name !== undefined ? name : "No name set";
  console.log("👤 Authenticated as: " + authDetails.username + " (" + nameStr + ")");
  var email = authDetails.email;
  var emailStr = email !== undefined ? email : "Not public";
  console.log("📧 Email: " + emailStr);
  var scopesStr = authDetails.scopes.length > 0 ? authDetails.scopes.join(", ") : "None detected";
  console.log("📋 Token scopes: " + scopesStr);
  if (authDetails.scopes.includes("repo")) {
    console.log("✅ Token has repo access (required for creating PRs)");
  } else {
    console.log("⚠️  Token may not have sufficient permissions for creating PRs");
  }
}

function authHelpCommand() {
  console.log("🔐 GitHub Authentication Help\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\njj-stack supports the following authentication methods (in priority order):\n\n1. 🛠️  GitHub CLI (recommended)\n   Install: https://cli.github.com/\n   Setup: gh auth login\n\n2. 🌍 Environment Variables\n   export GITHUB_TOKEN=your_token_here\n   export GH_TOKEN=your_token_here  # Alternative name\n   \n   Create a Personal Access Token at: https://github.com/settings/tokens/new\n   Required scopes: repo, pull_requests\n\nCommands:\n  jj-stack auth test - Test current authentication\n  jj-stack auth help - Show this help\n\nNote: jj-stack no longer stores tokens locally for security reasons.\nUse GitHub CLI or environment variables for authentication.\n");
}

export {
  getGitHubAuthRaw ,
  getGitHubAuth ,
  getAuthDetails ,
  authInstructions ,
  getGitHubAuthCli ,
  sourceToString ,
  authTestCommand ,
  authHelpCommand ,
}
/* ../lib/auth.js Not a pure module */
