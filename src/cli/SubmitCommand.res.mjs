// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Process from "process";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as SubmitJs from "../lib/submit.js";

function analyzeSubmissionPlan(prim0, prim1) {
  return SubmitJs.analyzeSubmissionPlan(prim0, prim1);
}

function executeSubmissionPlan(prim0, prim1, prim2) {
  return SubmitJs.executeSubmissionPlan(prim0, prim1, prim2);
}

function getGitHubConfig(prim) {
  return SubmitJs.getGitHubConfig();
}

function formatBookmarkStatus(bookmark, remoteBookmarks, existingPRs) {
  var hasRemote = remoteBookmarks.get(bookmark);
  var hasExistingPR = existingPRs.get(bookmark);
  return "📋 " + bookmark + ": " + (
          Core__Option.isSome(hasRemote) ? "has remote" : "needs push"
        ) + ", " + (
          Core__Option.isSome(hasExistingPR) ? "has PR" : "needs PR"
        );
}

function createSubmissionCallbacks(dryRunOpt, param) {
  var dryRun = dryRunOpt !== undefined ? dryRunOpt : false;
  return {
          onBookmarkValidated: (function (bookmark) {
              console.log("✅ Found local bookmark: " + bookmark);
            }),
          onAnalyzingStack: (function (targetBookmark) {
              console.log("🔍 Finding all bookmarks in stack for " + targetBookmark + "...");
            }),
          onStackFound: (function (bookmarks) {
              console.log("📚 Found stack bookmarks to submit: " + bookmarks.join(" -> "));
            }),
          onCheckingRemotes: (function (bookmarks) {
              console.log("\n🔍 Checking status of " + bookmarks.length.toString() + " bookmarks...");
            }),
          onCheckingPRs: (function (_bookmarks) {
              
            }),
          onPlanReady: (function (plan) {
              console.log("📍 GitHub repository: " + plan.repoInfo.owner + "/" + plan.repoInfo.repo);
              plan.bookmarksToSubmit.forEach(function (bookmark) {
                    console.log(formatBookmarkStatus(bookmark, plan.remoteBookmarks, plan.existingPRs));
                  });
              if (dryRun) {
                console.log("\n🧪 DRY RUN - Simulating all operations:");
                console.log("=".repeat(50));
                if (plan.bookmarksNeedingPush.length > 0) {
                  console.log("\n🛜 Would push " + plan.bookmarksNeedingPush.length.toString() + " bookmarks to remote:");
                  plan.bookmarksNeedingPush.forEach(function (bookmark) {
                        console.log("   • " + bookmark);
                      });
                }
                if (plan.bookmarksNeedingPR.length > 0) {
                  console.log("\n📝 Would create " + plan.bookmarksNeedingPR.length.toString() + " PRs:");
                  plan.bookmarksNeedingPR.forEach(function (bookmark) {
                        console.log("   • " + bookmark.bookmark + ": \"" + bookmark.prContent.title + "\" (base: " + bookmark.baseBranch + ")");
                      });
                  return ;
                } else {
                  return ;
                }
              } else {
                if (plan.bookmarksNeedingPush.length > 0) {
                  console.log("\n📤 Pushing " + plan.bookmarksNeedingPush.length.toString() + " bookmarks to remote...");
                }
                if (plan.bookmarksNeedingPR.length > 0) {
                  console.log("\n📝 Creating " + plan.bookmarksNeedingPR.length.toString() + " PRs...");
                  return ;
                } else {
                  return ;
                }
              }
            }),
          onPushStarted: (function (bookmark, remote) {
              if (dryRun) {
                console.log("[DRY RUN] Would push " + bookmark + " to " + remote);
              } else {
                console.log("Pushing " + bookmark + " to " + remote + "...");
              }
            }),
          onPushCompleted: (function (bookmark, remote) {
              if (!dryRun) {
                console.log("✅ Successfully pushed " + bookmark + " to " + remote);
                return ;
              }
              
            }),
          onPRStarted: (function (bookmark, title, base) {
              if (dryRun) {
                console.log("   • " + bookmark + ": \"" + title + "\" (base: " + base + ")");
              } else {
                console.log("Creating PR: " + bookmark + " -> " + base);
                console.log("   Title: \"" + title + "\"");
              }
            }),
          onPRCompleted: (function (bookmark, pr) {
              if (!dryRun) {
                console.log("✅ Created PR for " + bookmark + ": " + pr.html_url);
                console.log("   Title: " + pr.title);
                console.log("   Base: " + pr.base.ref + " <- Head: " + pr.head.ref);
                return ;
              }
              
            }),
          onError: (function (error, context) {
              var errorMessage = Core__Option.getOr(error.message, "Unknown error");
              console.error("❌ Error " + context + ": " + errorMessage);
            })
        };
}

async function submitCommand(bookmarkName, options) {
  var dryRun = options !== undefined ? Core__Option.getOr(options.dryRun, false) : false;
  if (dryRun) {
    console.log("🧪 DRY RUN: Simulating submission of bookmark: " + bookmarkName);
  } else {
    console.log("🚀 Submitting bookmark: " + bookmarkName);
  }
  var callbacks = createSubmissionCallbacks(dryRun, undefined);
  var plan = await SubmitJs.analyzeSubmissionPlan(bookmarkName, callbacks);
  if (dryRun) {
    console.log("=".repeat(50));
    console.log("✅ Dry run completed successfully!");
    return ;
  }
  var githubConfig = await SubmitJs.getGitHubConfig();
  console.log("🔑 Using GitHub authentication from: configured");
  var result = await SubmitJs.executeSubmissionPlan(plan, githubConfig, callbacks);
  if (result.success) {
    console.log("\n🎉 Successfully submitted stack up to " + bookmarkName + "!");
    if (result.pushedBookmarks.length > 0) {
      console.log("   📤 Pushed: " + result.pushedBookmarks.join(", "));
    }
    if (result.createdPRs.length <= 0) {
      return ;
    }
    var createdPrBookmarks = result.createdPRs.map(function (pr) {
          return pr.bookmark;
        });
    console.log("   📝 Created PRs: " + createdPrBookmarks.join(", "));
    return ;
  }
  console.error("\n❌ Submission completed with errors:");
  result.errors.forEach(function (param) {
        var errorMessage = Core__Option.getOr(param.error.message, "Unknown error");
        console.error("   • " + param.context + ": " + errorMessage);
      });
  Process.exit(1);
}

export {
  analyzeSubmissionPlan ,
  executeSubmissionPlan ,
  getGitHubConfig ,
  formatBookmarkStatus ,
  createSubmissionCallbacks ,
  submitCommand ,
}
/* process Not a pure module */
